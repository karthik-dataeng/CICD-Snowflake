name: Snowflake Definition Migration Dev to SIT

on:
  workflow_dispatch:

jobs:
  snowflake-connection:
    runs-on: ubuntu-latest

    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install snowflake-connector-python

    - name: Test Connectivity for DEV Snowflake Environment
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
      run: |
        python - <<EOF
        import snowflake.connector
        import os

        conn = None
        try:
            conn = snowflake.connector.connect(
                account=os.getenv("SNOWFLAKE_ACCOUNT"),
                user=os.getenv("SNOWFLAKE_USER"),
                password=os.getenv("SNOWFLAKE_PASSWORD"),
                warehouse=os.getenv("SNOWFLAKE_WAREHOUSE"),
                database=os.getenv("SNOWFLAKE_DATABASE"),
                schema=os.getenv("SNOWFLAKE_SCHEMA")
            )
            print("Connection successful!")

            # List all the tables present in the schema
            cursor = conn.cursor()
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            print("Tables in the schema: ")
            for table in tables:
              print(f"- {table[1]}")

            # Open file to save DDLs for the current connection
            with open("schema_ddls.sql", "w") as ddl_file:
                for table in tables:
                    table_name = table[1]  # Adjust index based on SHOW TABLES output structure
                    #print(f"Fetching DDL for table: {table_name}")

                    # Get the DDL for the table
                    cursor.execute(f"SELECT GET_DDL('TABLE', '{table_name}')")
                    ddl_result = cursor.fetchone()

                    if ddl_result:
                        ddl = ddl_result[0]  # The DDL is in the first column
                        ddl_file.write(f"-- DDL for table: {table_name}\n")
                        ddl_file.write(ddl + ";\n\n")

            print("All DDLs for current Snowflake connection have been saved to schema_ddls.sql")

        except Exception as e:
            print(f"Connection failed: {e}")
        finally:
            if conn:
                conn.close()
        EOF

    - name: Upload DDLs as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: snowflake-ddls
        path: schema_ddls.sql

    - name: Test Connectivity for SIT Snowflake Environment
      env:
        SIT_SNOWFLAKE_ACCOUNT: ${{ secrets.SIT_SNOWFLAKE_ACCOUNT }}
        SIT_SNOWFLAKE_USER: ${{ secrets.SIT_SNOWFLAKE_USER }}
        SIT_SNOWFLAKE_PASSWORD: ${{ secrets.SIT_SNOWFLAKE_PASSWORD }}
        SIT_SNOWFLAKE_WAREHOUSE: ${{ secrets.SIT_SNOWFLAKE_WAREHOUSE }}
        SIT_SNOWFLAKE_DATABASE: ${{ secrets.SIT_SNOWFLAKE_DATABASE }}
        SIT_SNOWFLAKE_SCHEMA: ${{ secrets.SIT_SNOWFLAKE_SCHEMA }}
      run: |
        python - <<EOF
        import snowflake.connector
        import os

        conn = None
        try:
            # Connect to SIT Snowflake Environment
            conn = snowflake.connector.connect(
                account=os.getenv("SIT_SNOWFLAKE_ACCOUNT"),
                user=os.getenv("SIT_SNOWFLAKE_USER"),
                password=os.getenv("SIT_SNOWFLAKE_PASSWORD"),
                warehouse=os.getenv("SIT_SNOWFLAKE_WAREHOUSE"),
                database=os.getenv("SIT_SNOWFLAKE_DATABASE"),
                schema=os.getenv("SIT_SNOWFLAKE_SCHEMA")
            )
            print("Connection successful to SIT Snowflake environment!")

            # Read and execute each DDL from the uploaded artifact
            with open('schema_ddls.sql', 'r') as ddl_file:
                ddl_statements = ddl_file.read().split(';')  # Split statements by semicolon
                cursor = conn.cursor()
                for statement in ddl_statements:
                    if statement.strip():  # Only execute non-empty statements
                        #print(f"Executing DDL: {statement.strip()}")
                        cursor.execute(statement.strip())
            print("All DDLs applied successfully to the SIT environment!")

        except Exception as e:
            print(f"Error occurred in SIT connection: {e}")
        finally:
            if conn:
                conn.close()
        EOF

    - name: Print Bye Bye Message
      run: echo "Bye Bye! Snowflake connection test complete."
